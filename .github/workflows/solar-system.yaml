name: Solar System Workflow

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
  unit-Testing:
    name: Unit Testing
    services:
      mongo-db:
        #run: docker pull siddarth67/mongo-db:non-prod
        image: siddharth67/mongo-db:non-prod
        ports:
          - 27017:27017
    env:
      MONGO_URI: 'mongodb://localhost:27017/superData'
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password
    
    strategy:
      matrix:
        nodejs_version: [18]
        operating_system: [ubuntu-latest]
        exclude:
          - nodejs_version: 18
            operating_system: macos-latest
    runs-on: ${{ matrix.operating_system }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup NodeJs Version - ${{ matrix.nodejs_version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.nodejs_version }}

      - name: Cache NPM Dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        run: npm install

      - name: Unit Testing
        id: nodejs-unit-testing-step
        run: npm test

      - name: Archive Test Result
        if: always() # && (steps.nodejs-unit-testing-step.outcome == 'failure' || steps.nodejs-unit-testing-step.outcome == 'success')
        uses: actions/upload-artifact@v4
        with:
          name: Mocha-Test-Result
          path: test-results.xml

  code-coverage:
    name: Code Coverage
    container:
      image: node:18
    services:
      mongo-db:
        #run: docker pull siddarth67/mongo-db:non-prod
        image: siddharth67/mongo-db:non-prod
        options:
           --name mongo
    env:
      MONGO_URI: 'mongodb://mongo:27017/superData'
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup NodeJs Version - 18
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Cache NPM Dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        run: npm install

      - name: Check Code Coverage
        continue-on-error: true
        run: npm run coverage

      - name: Archive Test Result
        uses: actions/upload-artifact@v4
        with:
          name: Code-Coverage-Result
          path: coverage
          retention-days: 5
  docker:
    name: Containerization
    needs: [code-coverage, unit-Testing]
    permissions:
      packages: write # none / read / write
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v4
       
    - name: DockerHub Login
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
       
    - name: GHCR Login
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
       
    - name: Docker Build For Testing
      uses: docker/build-push-action@v6
      with:
        context: .
        push: false
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}    
    
    - name: Docker Image Test
      run: |
        docker images

        # Run the Docker container
        docker run --name solar-system-app -d \
          -p 3000:3000 \
          -e MONGO_URI=$MONGO_URL \
          -e MONGO_USERNAME=$MONGO_USERNAME \
          -e MONGO_PASSWORD=$MONGO_PASSWORD \
          ${{ secrets.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

        # Get the container's IP address
        export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
        echo "Container IP: $IP"
        
        # Test the image URL using wget
        echo "Testing Image URL using wget"
        wget -q -O - 127.0.0.1:3000/live | grep live

    #- name: Dokcer push
      #uses: docker/build-push-action@v6
      #with:
        #context: .
        #push: true
        #tags: ${{ secrets.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

    - name: GHCR Container Image push
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: |
           ${{ secrets.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
           ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}
           
  dev-eks-deploy:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1 # Replace with your AWS region
       
      - name: Install Kubectl CLI
        uses: azure/setup-kubectl@v4
        #with:
           #version: 'v1.31.0'
           
      - name: Set Kubeconfig Authentication 
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}
           
      - name: Fetch K8s Cluster details
        run: |
          kubectl version --client=true
          echo --------------------------------
          kubectl get nodes
           
      - name: Parse Nginx Ingress Controller IP
        run: |
          echo "INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath="{.status.loadBalancer.ingress[0].ip}")" >> $GITHUB_ENV
          kubectl get nodes
           
      - name: Replace Token in Manifest Files
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '_{_'
          tokenSuffix: '_}_'
          files: '["kubernetes/development/*.yaml"]'
        env:
          NAMESPACE: ${{ vars.NAMESPACE }}
          REPLICAS: ${{ vars.REPLICAS }}
          IMAGE: ${{ env.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
          INGRESS_IP: ${{ env.INGRESS_IP }}
           
      - name: Create MongoDB secret
        run: |
          kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
          --from-literal=MONGO_uri=${{ env.MONGO_URL }} \
          --from-literal=MONGO_USERNAME=${{ env.MONGO_USERNAME }} \
          --from-literal=MONGO_PASSWORD=${{ env.MONGO_PASSWORD }} \
          --save-config \
          --dry-run=client \
          -o yaml | kubectl apply -f -          
           
      - name: Check IP Replacement in Manifest File
        run: |
          cat kubernetes/development/*.yaml 
  
   
